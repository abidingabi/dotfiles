* Why a literate config?
Mostly because this makes it easier to organize stuff… That's why most of the commentary is snark, and not actual explanations.
* Basic Configuration
** Who am I?
#+begin_src elisp
(setq user-full-name "Abigail"
      user-mail-address "abigail@dogbuilt.net")
#+end_src
** Where are my secrets?
#+begin_src elisp
(setq auth-sources '("~/.authinfo"))
#+end_src
I really ought to use gpg for this...
** Who likes losing work?
*** Undo
This sets the maximum amount of undo information to 80Mb. In addition to this, by default, all changes while in insert are one big blob; this gives more undo states.
#+begin_src elisp
(setq undo-limit 80000000
      evil-want-fine-undo t)
#+end_src
*** Autosave
#+begin_src elisp
(setq auto-save-default t)
#+end_src
*** Delete files to trash
Because I'm not perfect.
#+begin_src elisp
(setq-default delete-by-moving-to-trash t)
#+end_src
** Window Management
#+begin_src elisp
(setq-default window-combination-resize t)
#+end_src
** What shell do I use?
Fish.
#+begin_src elisp
(setq explicit-shell-file-name (executable-find "fish"))
(setq vterm-shell (executable-find "fish"))
#+end_src
* Visuals
Because some things should look nice.
** Theme
Light themes are nice for plain text and code, and I especially like flatwhite's choice of using backgrounds for syntax highlighting.
#+begin_src elisp
;; (setq doom-theme 'doom-flatwhite)
(setq doom-theme 'doom-plain)
#+end_src
** Custom Faces
#+begin_src elisp
(custom-set-faces!
  `(cursor :background ,(doom-color 'blue)))
#+end_src
** Fonts
Fira Mono is an excellent monospace font, and Overpass is a nice proportional one.
#+begin_src elisp
(setq doom-font "Fira Mono 14"
      doom-variable-pitch-font "Overpass 14")
#+end_src
** Splashcreen
Doom's text logo on the splashscreen is nice, but it'd be nicer with a cute demon from [[https://github.com/jeetelongname/doom-banners]].
[[file:cute-demon.png]]
#+begin_src elisp
(setq fancy-splash-image "~/.config/doom/cute-demon.png")
#+end_src
** Line Numbers
I used to use relative line numbers, but then I realized I never actually use them, so now I use normal line numbers.
#+begin_src elisp
(setq display-line-numbers-type t)
#+end_src
** Cut off text
By default, emacs uses =...= for cut off text; not only does the unicode =…= look nicer but it also saves some space.
#+begin_src elisp
(setq truncate-string-ellipsis "…")
#+end_src
** Make the cursor the size of the character under it
This is especially relevant on e.g. tabs.
#+begin_src elisp
(setq-default x-stretch-cursor t)
#+end_src
* Apps
** Email
Mu4e is a nice email client, so let's use that.

The loadpath needs to be set for mu4e, otherwise it will not launch.
#+begin_src elisp
(add-load-path! "/etc/profiles/per-user/abi/share/emacs/site-lisp/mu4e")
#+end_src
*** Email Directories
To handle your email, mu4e needs to know where it is. These paths are relative to =+mu4e-mu4e-mail-path=, which is =~/.mail= by default, and is not set to another value here.
#+begin_src elisp
(set-email-account! "abigail"
  '((mu4e-sent-folder       . "/abigail/Sent")
    (mu4e-drafts-folder     . "/abigail/Drafts")
    (mu4e-trash-folder      . "/abigail/Trash")
    (mu4e-refile-folder     . "/abigail/Archive")
    (smtpmail-smtp-user     . "abigail@dogbuilt.net"))
  t)
#+end_src
*** Sending Email
Sending email is nice too.
#+begin_src elisp
(after! mu4e
  (setq sendmail-program "/etc/profiles/per-user/abi/bin/msmtp"
        send-mail-function #'smtpmail-send-it
        message-sendmail-f-is-evil t
        message-sendmail-extra-arguments '("--read-envelope-from")
        message-send-mail-function #'message-send-mail-with-sendmail))
#+end_src
** Calc
Calc is really nice to, well, do math.

Any sane person prefers radians and keeping things exact; e.g. $\sqrt{2}$ should be kept irrational for as long as possible.
#+begin_src elisp
(setq calc-angle-mode 'rad
      calc-symbolic-mode t)
#+end_src
**** CalcTeX
CalcTeX renders math expressions in =calc-mode= through LaTeX previews, making them easier to read.

However, it makes some questionable choices regarding the hardcoding of paths—luckily, tecosaur [[https:tecosaur.github.io/emacs-config/config.html#calc-calctex][already figured this out]] for us :).
#+begin_src elisp
(use-package! calctex
  :commands calctex-mode
  :init
  (add-hook 'calc-mode-hook #'calctex-mode)
  :config
  (setq calctex-additional-latex-macros
        (concat calctex-additional-latex-macros
                "\n\\let\\evalto\\Rightarrow"))
  (defadvice! no-messaging-a (orig-fn &rest args)
    :around #'calctex-default-dispatching-render-process
    (let ((inhibit-message t) message-log-max)
      (apply orig-fn args)))
  ;; Fix hardcoded dvichop path (whyyyyyyy)
  (let ((vendor-folder (concat (file-truename doom-local-dir)
                               "straight/"
                               (format "build-%s" emacs-version)
                               "/calctex/vendor/")))
    (setq calctex-dvichop-sty (concat vendor-folder "texd/dvichop")
          calctex-dvichop-bin (concat vendor-folder "texd/dvichop")))
  (unless (file-exists-p calctex-dvichop-bin)
    (message "CalcTeX: Building dvichop binary")
    (let ((default-directory (file-name-directory calctex-dvichop-bin)))
      (call-process "make" nil nil nil))))
#+end_src
* Modes
** Major
*** JQ
=jq= is an extremely useful command line tool, but integration with emacs is nice, especially for =jq= programs.

This automatically loads jq-mode when files with the extension =jq= are opened.
#+begin_src elisp
(add-to-list 'auto-mode-alist '("\\.jq$" . jq-mode))
#+end_src
*** Org
**** Org Directory
This controls where org files are stored.
#+begin_src elisp
(setq org-directory "~/org/")
#+end_src
**** Visuals
A lot of this is taken from [[https://tecosaur.github.io/emacs-config/config.html#org-visuals][Tecosaur's org mode visual config]].
***** Font Display
Both mixed pitch and =+org-pretty-mode= are great.
#+begin_src elisp
(add-hook 'org-mode-hook #'mixed-pitch-mode)
(add-hook 'org-mode-hook #'+org-pretty-mode)
#+end_src
Headings should be made bigger:
#+begin_src elisp
(custom-set-faces!
  '(outline-1 :weight extra-bold :height 1.25)
  '(outline-2 :weight bold :height 1.15)
  '(outline-3 :weight bold :height 1.12)
  '(outline-4 :weight semi-bold :height 1.09)
  '(outline-5 :weight semi-bold :height 1.06)
  '(outline-6 :weight semi-bold :height 1.03)
  '(outline-8 :weight semi-bold)
  '(outline-9 :weight semi-bold))
#+end_src
and also titles:
#+begin_src elisp
(custom-set-faces!
  '(org-document-title :height 1.2))
#+end_src
***** Symbols
In general, I don't like ligatures in programming languages, however they make reading org mode documents nicer.
#+begin_src elisp
(setq +ligatures-in-modes '(org-mode))
(setq +ligatures-extras-in-modes '(org-mode))
#+end_src

While generally, I like =org-pretty-entities=, the way it changes sub/superscripts makes them incredibly annoying to edit.
#+begin_src elisp
(setq org-pretty-entities-include-sub-superscripts nil)
#+end_src

=▾= is used to replace =…= for collapsed items, as it indicates 'collapsed section' better.
#+begin_src elisp
(setq org-ellipsis "▾")
#+end_src
***** Org re-reveal
#+begin_src elisp
(setq! org-re-reveal-single-file 't)
#+end_src
***** Org Fragtog
=org-fragtog= automatically toggles inline LaTeX fragments.
#+begin_src elisp
(add-hook 'org-mode-hook 'org-fragtog-mode)
#+end_src
***** Org CDLaTeX
=org-cdlatex= helps with typing in LaTeX snippets.
#+begin_src elisp
(add-hook 'org-mode-hook 'org-cdlatex-mode)
#+end_src
*** PDF
**** Keybinds
#+begin_src elisp
(after! pdf-view
  (evil-define-key* 'normal pdf-view-mode-map
    (kbd "<left>") #'pdf-view-scroll-down-or-previous-page
    (kbd "<right>") #'pdf-view-scroll-up-or-next-page))
#+end_src
**** Theming
#+begin_src elisp
(add-hook 'pdf-view-mode-hook #'pdf-view-themed-minor-mode)
#+end_src
** Minor
*** Writeroom
Writeroom mode is great for focusing on writing, but is even greater when the cursor stayed vertically centered.
#+begin_src elisp
(add-hook! 'writeroom-mode-hook
  (if writeroom-mode
      (add-hook 'post-command-hook #'recenter nil t)
    (remove-hook 'post-command-hook #'recenter t)))
#+end_src
*** Evil Snipe
Evil snipe is great at quickly getting to something, but only being able to do it across a line is annoying.
#+begin_src elisp
(setq evil-snipe-scope 'visible
      evil-snipe-repeat-scope 'whole-buffer)
#+end_src
*** Git Auto Commit
Git auto commit is great, but it's even nicer to automatically push to remotes, and write your own summaries.
#+begin_src elisp
(setq gac-automatically-push-p t
      gac-ask-for-summary-p t)
#+end_src
* Keybinds
#+begin_src elisp
(map! :leader
      :desc "Mixed-pitch mode"
      "t m" #'mixed-pitch-mode)

(map! :leader
      :desc "Take a screenshot"
      "S" #'screenshot)

(map! :leader
      :desc "Show top level keybinds"
      "h b T" #'tlk/show)
#+end_src
